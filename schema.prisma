generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PrismaUser {
  id             String               @id @map("id")
  login          String               @unique @map("login")
  email          String               @unique @map("email")
  name           String               @map("name")
  hashedPassword String               @map("hashed_password")
  projectMembers PrismaProjectMember[]
  settings       PrismaUserSetting[]
  deletedAt      DateTime?            @map("deleted_at")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  @@map("users")
}

model PrismaUserSetting {
  id        String     @id @map("id")
  key       String     @unique @map("key")
  value     String     @map("value")
  userId    String     @map("user_id")
  user      PrismaUser @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@unique([userId, key])
  @@map("user_settings")
}

model PrismaProject {
  id             String                      @id @map("id")
  login          String                      @unique @map("login")
  name           String                      @map("name")
  members        PrismaProjectMember[]
  settings       PrismaProjectSetting[]
  notifications  PrismaProjectNotification[]
  tables         PrismaTable[]
  deletedAt      DateTime?                   @map("deleted_at")
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")

  @@map("projects")
}

model PrismaProjectMember {
  id        String        @id @map("id")
  project   PrismaProject @relation(fields: [projectId], references: [id])
  projectId String        @map("project_id")
  user      PrismaUser    @relation(fields: [userId], references: [id])
  userId    String        @map("user_id")
  role      String        @default("OWNER") @map("role")
  createdAt DateTime      @default(now()) @map("created_at")

  @@unique([projectId, userId])
  @@map("project_members")
}

model PrismaProjectSetting {
  id        String        @id @map("id")
  key       String        @unique @map("key")
  value     String        @map("value")
  projectId String        @map("project_id")
  project   PrismaProject @relation(fields: [projectId], references: [id])
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@unique([projectId, key])
  @@map("project_settings")
}

model PrismaProjectNotification {
  id        String        @id @map("id")
  title     String        @map("title")
  message   String        @map("message")
  type      String        @map("type")
  createdAt DateTime      @default(now()) @map("created_at")
  deletedAt DateTime?     @map("deleted_at")
  projectId String        @map("project_id")
  project   PrismaProject @relation(fields: [projectId], references: [id])

  @@map("project_notifications")
}

model PrismaTable {
  id          String        @id @map("id")
  name        String        @map("name")
  projectId   String        @map("project_id")
  project     PrismaProject @relation(fields: [projectId], references: [id])
  columns     PrismaColumn[]
  records     PrismaRecord[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  createdBy   String        @map("created_by")
  updatedBy   String        @map("updated_by")

  @@unique([projectId, name])
  @@map("tables")
}

model PrismaColumn {
  id          String      @id @map("id")
  name        String      @map("name")
  type        String      @map("type") // "text", "number", "date", "boolean", etc.
  tableId     String      @map("table_id")
  table       PrismaTable @relation(fields: [tableId], references: [id])
  order       Int         @map("order")
  cells       PrismaCell[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@unique([tableId, name])
  @@map("columns")
}

model PrismaRecord {
  id          String      @id @map("id")
  tableId     String      @map("table_id")
  table       PrismaTable @relation(fields: [tableId], references: [id])
  cells       PrismaCell[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("records")
}

model PrismaCell {
  id          String       @id @map("id")
  value       String?      @map("value")
  columnId    String       @map("column_id")
  column      PrismaColumn @relation(fields: [columnId], references: [id])
  recordId    String       @map("record_id")
  record      PrismaRecord @relation(fields: [recordId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@unique([columnId, recordId])
  @@map("cells")
}
